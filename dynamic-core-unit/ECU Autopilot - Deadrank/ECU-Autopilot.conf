name: ECU AutoPilot Conf
slots:
    core:
        class: CoreUnit
    radar:
        class: RadarPVPUnit
        select: manual
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    weapon:
        class: WeaponUnit
        select: manual
    dbHud:
        class: databank
    vBooster:
        class: VerticalBooster
    hover:
        class: Hovercraft
    door:
        class: DoorUnit
        select: manual
    forcefield:
        class: ForceFieldUnit
        select: manual
handlers:
  unit:
    start:
      lua: |
        --Unit>Start()--
        cruiseAltitude = 300 --export
        rAngle = 0 --export
        maxPitch = 25 --export

        --Custom Widgets--
        local panel = system.createWidgetPanel("Cruise Selections")
        --Cruise Altitude
        local cruiseAltWidget
        cruiseAltWidget = system.createWidget(panel, "text")
        cruiseAltJson = json.encode ({ text = "Cruise Altitude: "})
        cruiseAltData = system.createData(cruiseAltJson)
        system.addDataToWidget(cruiseAltData, cruiseAltWidget)
        --Cruise Heading
        local cruiseHeadWidget
        cruiseHeadWidget = system.createWidget(panel, "text")
        cruiseHeadJson = json.encode ({ text = "Cruise Heading: "})
        cruiseHeadData = system.createData(cruiseHeadJson)
        system.addDataToWidget(cruiseHeadData, cruiseHeadWidget)
        --Cruise Speed
        local cruiseHeadWidget
        cruiseSpeedWidget = system.createWidget(panel, "text")
        cruiseSpeedJson = json.encode ({ text = "Cruise Speed: "})
        cruiseSpeedData = system.createData(cruiseSpeedJson)
        system.addDataToWidget(cruiseSpeedData, cruiseSpeedWidget)
        --END CUSTOM WIDGETS--

        worldSpeed = vec3(core.getWorldVelocity())
        constSpeed = vec3(core.getVelocity())

        _autoconf.updateCategoryPanel = function(elements, size, title, type, widgetPerData)
            for i = 1, size do
                local data = elements[i].getData()
                system.updateData(elements[i].getDataId(), dJson)
            end
        end

        --Get initial yaw--
        local yaw
        local worldVertical = vec3(core.getWorldVertical())
        local shipForward = vec3(vec3(core.getConstructWorldOrientationForward()):project_on_plane(worldVertical)):normalize()
        local shipRight = vec3(vec3(core.getConstructWorldOrientationRight()):project_on_plane(worldVertical)):normalize()
        local shipUp = vec3(core.getConstructWorldOrientationUp())
        local north = vec3(vec3(0,0,1):project_on_plane(worldVertical)):normalize()
        local angleUp = shipUp:dot(worldVertical)
        if angleUp > 0 then shipRight = -shipRight end
        local angleForward = math.acos(shipForward:dot(north))*constants.rad2deg
        local angleRight = math.acos(shipRight:dot(north))*constants.rad2deg
        if angleRight < 90 then -- facing west
            yaw = 180 - angleForward
        else
            yaw = angleForward - 180
        end
        targetHeading = yaw + 180
        if vec3(core.getWorldVelocity()):len()*3.6 > 50 then
            targetSpeed = vec3(core.getWorldVelocity()):len()*3.6
        else
            targetSpeed = 0
        end
        Nav = Navigator.new(system, core, unit)
        if Nav.control.isRemoteControlled() == 1 then
            system.freeze(0)
        else
            system.freeze(1)
        end
        Nav.axisCommandManager:setTargetGroundAltitude(4)

        -- element widgets
        -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
        core.show()
        placeRadar = true
        if atmofueltank_size > 0 then
            _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, "Atmo Fuel", "fuel_container")
            if placeRadar then
                _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
                placeRadar = false
            end
        end
        if spacefueltank_size > 0 then
            _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, "Space Fuel", "fuel_container")
            if placeRadar then
                _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
                placeRadar = false
            end
        end
        _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, "Rocket Fuel", "fuel_container")
        if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
            _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
            placeRadar = false
        end
        if antigrav ~= nil then antigrav.show() end
        if warpdrive ~= nil then warpdrive.show() end
        if gyro ~= nil then gyro.show() end

        -- freeze the player in he is remote controlling the construct
        if Nav.control.isRemoteControlled() == 1 then
            system.freeze(0)
        else
            system.freeze(1)
        end

        -- landing gear
        -- make sure every gears are synchonized with the first
        gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
        if gearExtended then
            Nav.control.extendLandingGears()
        else
            Nav.control.retractLandingGears()
        end

    stop:
      lua: |
        _autoconf.hideCategoryPanels()
        if antigrav ~= nil then antigrav.hide() end
        if warpdrive ~= nil then warpdrive.hide() end
        if gyro ~= nil then gyro.hide() end
        core.hide()
        Nav.control.switchOffHeadlights()
  system:
    actionStart:
      args: [option6]
      lua: |
        if targetHeading + 5 >= 360 then
          targetHeading = 5
        else
          targetHeading = targetHeading + 5
        end
    actionStart:
      args: [option4]
      lua: |
        if targetHeading - 5 <= 0 then
          targetHeading = 355
        else
          targetHeading = targetHeading - 5
        end
    actionStart:
      args: [option8]
      lua: |
        cruiseAltitude = cruiseAltitude + 20
    actionStart:
      args: [option2]
      lua: |
        cruiseAltitude = cruiseAltitude - 20
    actionStart:
      args: [option9]
      lua: |
        targetSpeed = targetSpeed + 5
    actionStart:
      args: [option3]
      lua: |
        targetSpeed = targetSpeed - 5
    update:
      lua: |
        --CUSTOM WIDGETS--
        cruiseAltJson = json.encode ({ text = "Cruise Altitude: " .. tostring(cruiseAltitude)})
        system.updateData(cruiseAltData, cruiseAltJson)

        cruiseHeadJson = json.encode ({ text = "Cruise Heading: " .. tostring(targetHeading)})
        system.updateData(cruiseHeadData, cruiseHeadJson)

        cruiseSpeedJson = json.encode ({ text = "Cruise Speed: " .. tostring(targetSpeed)})
        system.updateData(cruiseSpeedData, cruiseSpeedJson)

        --Widget Updates
        _autoconf.updateCategoryPanel(weapon, weapon_size, "Weapons", "weapon", true)
        _autoconf.updateCategoryPanel(radar, radar_size, "Periscope", "periscope", false)
        placeRadar = true
        if atmofueltank_size > 0 then
            _autoconf.updateCategoryPanel(atmofueltank, atmofueltank_size, "Atmo Fuel", "fuel_container",false)
            if placeRadar then
                _autoconf.updateCategoryPanel(radar, radar_size, "Radar", "radar",false)
                placeRadar = false
            end
        end
        if spacefueltank_size > 0 then
            _autoconf.updateCategoryPanel(spacefueltank, spacefueltank_size, "Space Fuel", "fuel_container",false)
            if placeRadar then
                _autoconf.updateCategoryPanel(radar, radar_size, "Radar", "radar",false)
                placeRadar = false
            end
        end
    flush:
      lua: |
        local power = 5
        local worldUp = vec3(core.getConstructWorldOrientationUp())
        local worldForward = vec3(core.getConstructWorldOrientationForward())
        local worldRight = vec3(core.getConstructWorldOrientationRight())
        local worldVertical = vec3(core.getWorldVertical())
        cPitch = -math.asin(worldForward:dot(worldVertical)) * constants.rad2deg
        worldSpeed = vec3(core.getWorldVelocity())
        constSpeed = vec3(core.getVelocity())

        if (pitchPID == nil) then
            pitchPID = pid.new(1, 0, 80)
            rollPID = pid.new(0.1, 0, 10)
            yawPID = pid.new(.1, 0, 10)
            speedPID = pid.new(2, 0, 10)
        end


        ------------------Adjustments--------------------
        --pitchAdjust
        local altDiff = cruiseAltitude - core.getAltitude()
        setPitch = (altDiff/math.abs(altDiff))*(maxPitch - (maxPitch/(math.abs(altDiff*.1)+1)))
        if worldSpeed:len()*3.6 <= 25 then
            setPitch = 0
        end
        pitchPID:inject(setPitch - cPitch)
        pitchAdjust = pitchPID:get() * worldRight


        --rollAdjust
        currentRoll = getRoll(worldVertical, worldForward, worldRight)
        rollPID:inject(rAngle-currentRoll)
        rollAdjust = rollPID:get() * worldForward
 
        --yawAdjust 
        currentHeading = getYaw()
        yawChange = targetHeading - currentHeading
        if yawChange < -180 then
            yawChange = yawChange + 360
        end
        if targetHeading - currentHeading > 180 then
            yawChange = yawChange - 360
        end
        yawPID:inject(-yawChange)
        yawAdjust = yawPID:get() * worldUp
        --------------------------------------------------------------

        angularAcceleration = rollAdjust + pitchAdjust + yawAdjust

        Nav:setEngineCommand('torque', vec3(), angularAcceleration)

        -----Thrust/Speed------
        speedDif = targetSpeed - (worldSpeed:len() * 3.6)
        speedPID:inject(-speedDif)
        velocityAdjust = speedPID:get() * worldVertical - vec3(core.getWorldAirFrictionAcceleration())
        if targetSpeed > 10 then
            Nav:setEngineCommand('longitudinal', velocityAdjust, vec3(),false)
        end
    start:
      lua: |
        function getYaw()
          local worldVertical = vec3(core.getWorldVertical())
          local shipForward = vec3(vec3(core.getConstructWorldOrientationForward()):project_on_plane(worldVertical)):normalize()
          local shipRight = vec3(vec3(core.getConstructWorldOrientationRight()):project_on_plane(worldVertical)):normalize()
          local shipUp = vec3(core.getConstructWorldOrientationUp())
          local north = vec3(vec3(0,0,1):project_on_plane(worldVertical)):normalize()
          local angleUp = shipUp:dot(worldVertical)
          if angleUp > 0 then shipRight = -shipRight end
          local angleForward = math.acos(shipForward:dot(north))*constants.rad2deg
          local angleRight = math.acos(shipRight:dot(north))*constants.rad2deg
          if angleRight < 90 then -- facing west
            return 360 - angleForward
          else
            return angleForward
          end
        end